module @"/home/r0b36t/Desktop/CIR-AVIAL-LLVM/sampleCPrgms/matmul.cc" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  func.func @main() -> i32 {
    %alloca = memref.alloca() {alignment = 4 : i64} : memref<i32> loc(#loc2)
    %alloca_0 = memref.alloca() {alignment = 16 : i64} : memref<4x4xi32> loc(#loc55)
    %alloca_1 = memref.alloca() {alignment = 16 : i64} : memref<4x4xi32> loc(#loc56)
    %alloca_2 = memref.alloca() {alignment = 16 : i64} : memref<4x4xi32> loc(#loc57)
    %alloca_3 = memref.alloca() {alignment = 4 : i64} : memref<i32> loc(#loc58)
    %c4_i32 = arith.constant 4 : i32 loc(#loc8)
    memref.store %c4_i32, %alloca_3[] : memref<i32> loc(#loc58)
    memref.alloca_scope  {
      %c0_i32_4 = arith.constant 0 : i32 loc(#loc11)
      %1 = memref.load %alloca_3[] : memref<i32> loc(#loc12)
      %c1_i32 = arith.constant 1 : i32 loc(#loc59)
      scf.for %arg0 = %c0_i32_4 to %1 step %c1_i32  : i32 {
        memref.alloca_scope  {
          memref.alloca_scope  {
            %c0_i32_5 = arith.constant 0 : i32 loc(#loc16)
            %2 = memref.load %alloca_3[] : memref<i32> loc(#loc17)
            %c1_i32_6 = arith.constant 1 : i32 loc(#loc61)
            scf.for %arg1 = %c0_i32_5 to %2 step %c1_i32_6  : i32 {
              memref.alloca_scope  {
                %3 = arith.index_cast %arg0 : i32 to index loc(#loc19)
                %4 = arith.index_cast %arg1 : i32 to index loc(#loc20)
                memref.store %arg1, %alloca_0[%3, %4] : memref<4x4xi32> loc(#loc63)
                %5 = arith.index_cast %arg0 : i32 to index loc(#loc22)
                %6 = arith.index_cast %arg1 : i32 to index loc(#loc23)
                memref.store %arg0, %alloca_1[%5, %6] : memref<4x4xi32> loc(#loc64)
                %c0_i32_7 = arith.constant 0 : i32 loc(#loc25)
                %7 = arith.index_cast %arg0 : i32 to index loc(#loc26)
                %8 = arith.index_cast %arg1 : i32 to index loc(#loc27)
                memref.store %c0_i32_7, %alloca_2[%7, %8] : memref<4x4xi32> loc(#loc65)
              } loc(#loc62)
            } loc(#loc61)
          } loc(#loc61)
        } loc(#loc60)
      } loc(#loc59)
    } loc(#loc59)
    memref.alloca_scope  {
      %c0_i32_4 = arith.constant 0 : i32 loc(#loc30)
      %1 = memref.load %alloca_3[] : memref<i32> loc(#loc31)
      %c1_i32 = arith.constant 1 : i32 loc(#loc66)
      scf.for %arg0 = %c0_i32_4 to %1 step %c1_i32  : i32 {
        memref.alloca_scope  {
          memref.alloca_scope  {
            %c0_i32_5 = arith.constant 0 : i32 loc(#loc35)
            %2 = memref.load %alloca_3[] : memref<i32> loc(#loc36)
            %c1_i32_6 = arith.constant 1 : i32 loc(#loc68)
            scf.for %arg1 = %c0_i32_5 to %2 step %c1_i32_6  : i32 {
              memref.alloca_scope  {
                %c0_i32_7 = arith.constant 0 : i32 loc(#loc38)
                %3 = arith.index_cast %arg0 : i32 to index loc(#loc39)
                %4 = arith.index_cast %arg1 : i32 to index loc(#loc40)
                memref.store %c0_i32_7, %alloca_2[%3, %4] : memref<4x4xi32> loc(#loc70)
                memref.alloca_scope  {
                  %c0_i32_8 = arith.constant 0 : i32 loc(#loc43)
                  %5 = memref.load %alloca_3[] : memref<i32> loc(#loc44)
                  %c1_i32_9 = arith.constant 1 : i32 loc(#loc71)
                  scf.for %arg2 = %c0_i32_8 to %5 step %c1_i32_9  : i32 {
                    %6 = arith.index_cast %arg0 : i32 to index loc(#loc45)
                    %7 = arith.index_cast %arg2 : i32 to index loc(#loc46)
                    %8 = memref.load %alloca_0[%6, %7] : memref<4x4xi32> loc(#loc45)
                    %9 = arith.index_cast %arg2 : i32 to index loc(#loc47)
                    %10 = arith.index_cast %arg1 : i32 to index loc(#loc48)
                    %11 = memref.load %alloca_1[%9, %10] : memref<4x4xi32> loc(#loc47)
                    %12 = arith.muli %8, %11 : i32 loc(#loc45)
                    %13 = arith.index_cast %arg0 : i32 to index loc(#loc49)
                    %14 = arith.index_cast %arg1 : i32 to index loc(#loc50)
                    %15 = memref.load %alloca_2[%13, %14] : memref<4x4xi32> loc(#loc51)
                    %16 = arith.addi %15, %12 : i32 loc(#loc51)
                    memref.store %16, %alloca_2[%13, %14] : memref<4x4xi32> loc(#loc72)
                  } loc(#loc71)
                } loc(#loc71)
              } loc(#loc69)
            } loc(#loc68)
          } loc(#loc68)
        } loc(#loc67)
      } loc(#loc66)
    } loc(#loc66)
    %c0_i32 = arith.constant 0 : i32 loc(#loc52)
    memref.store %c0_i32, %alloca[] : memref<i32> loc(#loc73)
    %0 = memref.load %alloca[] : memref<i32> loc(#loc73)
    return %0 : i32 loc(#loc73)
  } loc(#loc54)
} loc(#loc)
#loc = loc("/home/r0b36t/Desktop/CIR-AVIAL-LLVM/sampleCPrgms/matmul.cc":0:0)
#loc1 = loc("sampleCPrgms/matmul.cc":3:1)
#loc2 = loc("sampleCPrgms/matmul.cc":31:1)
#loc3 = loc("sampleCPrgms/matmul.cc":5:3)
#loc4 = loc("sampleCPrgms/matmul.cc":5:13)
#loc5 = loc("sampleCPrgms/matmul.cc":5:22)
#loc6 = loc("sampleCPrgms/matmul.cc":5:31)
#loc7 = loc("sampleCPrgms/matmul.cc":6:3)
#loc8 = loc("sampleCPrgms/matmul.cc":6:11)
#loc9 = loc("sampleCPrgms/matmul.cc":9:5)
#loc10 = loc("sampleCPrgms/matmul.cc":17:5)
#loc11 = loc("sampleCPrgms/matmul.cc":9:18)
#loc12 = loc("sampleCPrgms/matmul.cc":9:25)
#loc13 = loc("sampleCPrgms/matmul.cc":10:5)
#loc14 = loc("sampleCPrgms/matmul.cc":11:7)
#loc15 = loc("sampleCPrgms/matmul.cc":16:7)
#loc16 = loc("sampleCPrgms/matmul.cc":11:20)
#loc17 = loc("sampleCPrgms/matmul.cc":11:27)
#loc18 = loc("sampleCPrgms/matmul.cc":12:7)
#loc19 = loc("sampleCPrgms/matmul.cc":13:9)
#loc20 = loc("sampleCPrgms/matmul.cc":13:12)
#loc21 = loc("sampleCPrgms/matmul.cc":13:19)
#loc22 = loc("sampleCPrgms/matmul.cc":14:9)
#loc23 = loc("sampleCPrgms/matmul.cc":14:12)
#loc24 = loc("sampleCPrgms/matmul.cc":14:19)
#loc25 = loc("sampleCPrgms/matmul.cc":15:19)
#loc26 = loc("sampleCPrgms/matmul.cc":15:9)
#loc27 = loc("sampleCPrgms/matmul.cc":15:12)
#loc28 = loc("sampleCPrgms/matmul.cc":20:5)
#loc29 = loc("sampleCPrgms/matmul.cc":28:5)
#loc30 = loc("sampleCPrgms/matmul.cc":20:18)
#loc31 = loc("sampleCPrgms/matmul.cc":20:25)
#loc32 = loc("sampleCPrgms/matmul.cc":21:5)
#loc33 = loc("sampleCPrgms/matmul.cc":22:7)
#loc34 = loc("sampleCPrgms/matmul.cc":27:7)
#loc35 = loc("sampleCPrgms/matmul.cc":22:20)
#loc36 = loc("sampleCPrgms/matmul.cc":22:27)
#loc37 = loc("sampleCPrgms/matmul.cc":23:7)
#loc38 = loc("sampleCPrgms/matmul.cc":24:19)
#loc39 = loc("sampleCPrgms/matmul.cc":24:9)
#loc40 = loc("sampleCPrgms/matmul.cc":24:12)
#loc41 = loc("sampleCPrgms/matmul.cc":25:9)
#loc42 = loc("sampleCPrgms/matmul.cc":26:38)
#loc43 = loc("sampleCPrgms/matmul.cc":25:22)
#loc44 = loc("sampleCPrgms/matmul.cc":25:29)
#loc45 = loc("sampleCPrgms/matmul.cc":26:22)
#loc46 = loc("sampleCPrgms/matmul.cc":26:25)
#loc47 = loc("sampleCPrgms/matmul.cc":26:32)
#loc48 = loc("sampleCPrgms/matmul.cc":26:35)
#loc49 = loc("sampleCPrgms/matmul.cc":26:11)
#loc50 = loc("sampleCPrgms/matmul.cc":26:14)
#loc51 = loc("sampleCPrgms/matmul.cc":26:19)
#loc52 = loc("sampleCPrgms/matmul.cc":30:10)
#loc53 = loc("sampleCPrgms/matmul.cc":30:3)
#loc54 = loc(fused[#loc1, #loc2])
#loc55 = loc(fused[#loc3, #loc4])
#loc56 = loc(fused[#loc3, #loc5])
#loc57 = loc(fused[#loc3, #loc6])
#loc58 = loc(fused[#loc7, #loc8])
#loc59 = loc(fused[#loc9, #loc10])
#loc60 = loc(fused[#loc13, #loc10])
#loc61 = loc(fused[#loc14, #loc15])
#loc62 = loc(fused[#loc18, #loc15])
#loc63 = loc(fused[#loc19, #loc21])
#loc64 = loc(fused[#loc22, #loc24])
#loc65 = loc(fused[#loc26, #loc25])
#loc66 = loc(fused[#loc28, #loc29])
#loc67 = loc(fused[#loc32, #loc29])
#loc68 = loc(fused[#loc33, #loc34])
#loc69 = loc(fused[#loc37, #loc34])
#loc70 = loc(fused[#loc39, #loc38])
#loc71 = loc(fused[#loc41, #loc42])
#loc72 = loc(fused[#loc49, #loc42])
#loc73 = loc(fused[#loc53, #loc52])
